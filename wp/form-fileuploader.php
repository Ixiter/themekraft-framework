<?php
class TK_WP_Fileuploader extends TK_Fileuploader{	/**	 * PHP 4 constructor	 *	 * @package Themekraft Framework	 * @since 0.1.0	 * 	 * @param string $name Name of colorfield	 * @param array $args Array of [ $id , $extra Extra colorfield code, option_groupOption group to save data, $before_textfield Code before colorfield, $after_textfield Code after colorfield   ]	 */	function tk_jquery_fileuploader( $name, $args = array() ){		$this->__construct( $name, $args );	}		/**	 * PHP 5 constructor	 *	 * @package Themekraft Framework	 * @since 0.1.0	 * 	 * @param string $name Name of colorfield	 * @param array $args Array of [ $id , $extra Extra colorfield code, option_groupOption group to save data, $before_textfield Code before colorfield, $after_textfield Code after colorfield   ]	 */	function __construct( $name, $args = array() ){		global $post, $tk_form_instance_option_group;				$defaults = array(			'id' => substr( md5 ( time() * rand() ), 0, 10 ),			'extra' => '',			'before_element' => '',			'after_element' => '',			'option_group' => $tk_form_instance_option_group,			'upload_type' => 'standard', 			'upload_dir' => 'uploads'		);				// Adding file actions		add_filter( 'sanitize_option_' . $tk_form_instance_option_group . '_values', array( $this , 'validate_actions' ) );				$parsed_args = wp_parse_args( $args, $defaults );		extract( $parsed_args , EXTR_SKIP );				if( $post != '' ){			$option_group_value = get_post_meta( $post->ID , $option_group , true );						$field_name = $option_group . '[' . $name . ']';			$value = $option_group_value[ $name ];		}else{			$value = get_option( $option_group  . '_values' );						$this->option_group = $option_group;			$field_name = $option_group . '_values[' . $name . ']';							$value = $value[ $name ];		}				$this->field_name = $field_name;		$this->value = $value;				$this->wp_name = $name;
		$this->upload_type = $upload_type;		$this->upload_dir = $upload_dir;				$field_name = $tk_form_instance_option_group . '_values[' . $name . ']';					parent::__construct( $field_name, $args );
	}		function validate_actions( $input ){		global $tk_form_instance_option_group;				// If error occured		if( $_FILES[ $tk_form_instance_option_group . '_values' ][ 'error' ][ $this->wp_name ] != 0  ){			$input[ $this->wp_name ] = $this->value;					}else{			// Storing new file			$file[ 'name' ] = $_FILES[ $tk_form_instance_option_group . '_values' ][ 'name' ][ $this->wp_name ];			$file[ 'type' ] = $_FILES[ $tk_form_instance_option_group . '_values' ][ 'type' ][ $this->wp_name ];			$file[ 'tmp_name' ] = $_FILES[ $tk_form_instance_option_group . '_values' ][ 'tmp_name' ][ $this->wp_name ];			$file[ 'error' ] = $_FILES[ $tk_form_instance_option_group . '_values' ][ 'error' ][ $this->wp_name ];			$file[ 'size' ] = $_FILES[ $tk_form_instance_option_group . '_values' ][ 'size' ][ $this->wp_name ];						// Deleting old file			if( !empty( $this->value['file'] ) ){				unlink( $this->value['file'] );			}						$override = array(					'test_form' => false,					'action' => 'update'				);								$wp_file = wp_handle_upload( $file, $override );			$input[ $this->wp_name ] = $wp_file;					}				return $input;	}		function get_html(){		$this->before_element = $this->before_element .  $this->value[ 'url' ] . '<br />' ;		$html = parent::get_html();		return $html;	}}
function tk_form_fileuploader( $name, $args = array(), $return_object = FALSE ){	$fileuploader = new TK_WP_Fileuploader( $name, $args );		if( TRUE == $return_object ){		return $fileuploader;	}else{		return $fileuploader->get_html();	}}